import numpy as np
import torch
import readfof

from kymatio.torch import HarmonicScattering3D
from kymatio.scattering3d.backend.torch_backend \
    import TorchBackend3D

# import sys
# sys.path.insert(1, '/home/fuffolo97/TESI/MyFunc')
# from MyFunc.myCIC_multiThread import cic
from MyFunc.myCIC import cic

def HaloWST(snapdir, snapnum=2, N_hgrid=128, hlength=1000, N_WSTgrid=128, j=4, l=4):
    """Funcion that evaluates Scattering Transform coefficients of first and second order,
    using a halo database from Quijote simulations.

    Arguments:
    - `snapdir` : the tree to the directory containing the datas, STOP before '/groups_';
    - `snapnum` : indicates the choosen redshift (def: 2)
    - `N_hgrid` : number of cells to divide the halos catalogue (def: 128)
    - `hlength` : dimension of the cubic simulation (def: 1000 Mpc/h)
    - `N_WSTgrid` : numper of cells to divide the density field, generated by myCIC,
      to calculate WST coefficients (def: 128)
    - `j` : coefficient for scattering transform evaluation
    - `l` : coefficient for scattering transform evaluation

    Returns:
    - touple, whose two elements are:
        * first order scattering transform coefficients
        * second order scattering transform coefficients
    """

    datas = readfof.FoF_catalog(snapdir, snapnum, read_IDs=False)
    pos_h = datas.GroupPos/1e3                     # positions in Mpc/h
    mass = datas.GroupMass * 1e10                  # masses in M_sun/h
    dens = cic(pos_h, mass, N_hgrid, hlength)
    
    M, N, O = N_WSTgrid, N_WSTgrid, N_WSTgrid
    J, L = j, l
    # S = HarmonicScattering3D(J=J, L=L, shape=(M, N, O), sigma_0=0.8, integral_powers=[0.8])
    Sx = HarmonicScattering3D(J=J, L=L, shape=(M, N, O), sigma_0=0.8, integral_powers=[0.8]).scattering(torch.from_numpy(dens))
    
    first_order = []
    second_order = []

    for a in range(L+1):
        for b in range(J+1):
            first_order.append(Sx[b, a, 0])
        second_order.append(Sx[5:,a,0].numpy())

    return (first_order, second_order)